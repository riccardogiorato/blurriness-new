{"version":3,"sources":["blurriness.ts"],"names":[],"mappings":"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","file":"blurriness.map","sourceRoot":"../src","sourcesContent":["const jimp = require('jimp');\nconst sobel = require('sobel');\nconst stats = require('stats-lite');\n\nexport namespace Blurriness {\n\n    /*\n        Returns a blurriness score for an image between 0 and 1. Higher values are more blurry. The\n        value returned is the inverse standard deviation of the image gradient after being passed\n        through a Sobel filter. A higher standard deviation means that the image has more edges,\n        with the assumption being that more edges means the image is less blurry.\n    */\n    export async function getBlurrinessAsync(imagePath: string): Promise<number> {\n        try {\n            const image: any = await jimp.read(imagePath);\n            if (!!image && image.bitmap.width > 0 && image.bitmap.height > 0) {\n                try {\n                    const sobelImage: any = sobel(image.bitmap).toImageData();\n                    if (!!sobelImage && sobelImage.width > 0 && sobelImage.height > 0) {\n                        image.bitmap = sobelImage;\n                        image.bitmap.data = Buffer.from(image.bitmap.data);\n                        const values: number[] = [];\n                        for (let x = 0; x < image.bitmap.width; ++x) {\n                            for (let y = 0; y < image.bitmap.height; ++y) {\n                                values.push(jimp.intToRGBA(image.getPixelColor(x, y)).r / 255);\n                            }\n                        }\n                        return 1 - stats.stdev(values);\n                    } else {\n                        return Promise.reject('Sobel filter failed.');\n                    }\n                } catch (error) {\n                    return Promise.reject(error);\n                }\n            } else {\n                return Promise.reject('No image data found.');\n            }\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\n}\n"]}